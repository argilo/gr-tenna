options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: gotenna_tx_usrp
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: baud_rate
  id: variable
  parameters:
    comment: ''
    value: '24000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 332.0]
    rotation: 0
    state: enabled
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: '926250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 460]
    rotation: 0
    state: enabled
- name: control_chan
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 524]
    rotation: 0
    state: enabled
- name: data_chan
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 524]
    rotation: 0
    state: enabled
- name: interp
  id: variable
  parameters:
    comment: ''
    value: '20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 460]
    rotation: 0
    state: enabled
- name: packets
  id: variable
  parameters:
    comment: ''
    value: gotenna_packet.encode_packets(2, gotenna_packet.encode_encrypted_payload(app_id,
      93100711244021, 93100712457340, 1, bytearray(a^b for a,b in zip([0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 193, 198], [0xae, 0x95, 0x6c, 0x00, 0xd2,
      0x8b, 0x02, 0x12, 0x5b, 0x1b, 0xa3, 0x88, 0xfc, 0xb8, 0x5a, 0x31, 0xe2, 0x7f,
      0xe7]))))
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 588]
    rotation: 0
    state: disabled
- name: packets
  id: variable
  parameters:
    comment: ''
    value: gotenna_packet.encode_shout_packets(data_chan, app_id, sender_gid, initials,
      message)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 652]
    rotation: 0
    state: enabled
- name: samp_per_sym
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 524]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: baud_rate * samp_per_sym * interp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 396]
    rotation: 0
    state: enabled
- name: app_id
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: App ID
    short_id: ''
    type: intx
    value: '0x3fff'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 44.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 216]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_1
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 296]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: 8 * samp_per_sym
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 276.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_1
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: 8 * samp_per_sym * interp
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 404]
    rotation: 0
    state: enabled
- name: blocks_vco_c_0
  id: blocks_vco_c
  parameters:
    affinity: ''
    alias: ''
    amplitude: '0.9'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    sensitivity: 2*math.pi
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 388]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: byte
    vector: gotenna_packet.gfsk_bytes(packets)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 164.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_1
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: complex
    vector: gotenna_packet.envelope(packets)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 260.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_2
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: float
    vector: gotenna_packet.vco(center_freq, control_chan, data_chan, packets)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 388]
    rotation: 0
    state: enabled
- name: digital_gfsk_mod_0
  id: digital_gfsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '0.5'
    comment: ''
    do_unpack: 'True'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: samp_per_sym
    sensitivity: '1.0'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 164.0]
    rotation: 0
    state: enabled
- name: gotenna_packet
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "#!/usr/bin/env python3\n#\n# Copyright 2018 Clayton Smith (argilo@gmail.com)\n\
      #\n# This file is part of gr-tenna.\n#\n# gr-tenna is free software: you can\
      \ redistribute it and/or modify\n# it under the terms of the GNU General Public\
      \ License as published by\n# the Free Software Foundation, either version 3\
      \ of the License, or\n# (at your option) any later version.\n#\n# gr-tenna is\
      \ distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY;\
      \ without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR\
      \ PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You\
      \ should have received a copy of the GNU General Public License\n# along with\
      \ gr-tenna.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport reedsolo\n\
      import struct\nimport time\n\nCRC16_TABLE = [\n    0x0000, 0x1021, 0x2042, 0x3063,\
      \ 0x4084, 0x50a5, 0x60c6, 0x70e7,\n    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c,\
      \ 0xd1ad, 0xe1ce, 0xf1ef,\n    0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294,\
      \ 0x72f7, 0x62d6,\n    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff,\
      \ 0xe3de,\n    0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,\n\
      \    0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,\n    0x3653,\
      \ 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,\n    0xb75b, 0xa77a,\
      \ 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,\n    0x48c4, 0x58e5, 0x6886,\
      \ 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n    0xc9cc, 0xd9ed, 0xe98e, 0xf9af,\
      \ 0x8948, 0x9969, 0xa90a, 0xb92b,\n    0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71,\
      \ 0x0a50, 0x3a33, 0x2a12,\n    0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58,\
      \ 0xbb3b, 0xab1a,\n    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60,\
      \ 0x1c41,\n    0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,\n\
      \    0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,\n    0xff9f,\
      \ 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,\n    0x9188, 0x81a9,\
      \ 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,\n    0x1080, 0x00a1, 0x30c2,\
      \ 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n    0x83b9, 0x9398, 0xa3fb, 0xb3da,\
      \ 0xc33d, 0xd31c, 0xe37f, 0xf35e,\n    0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235,\
      \ 0x5214, 0x6277, 0x7256,\n    0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f,\
      \ 0xd52c, 0xc50d,\n    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424,\
      \ 0x4405,\n    0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,\n\
      \    0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,\n    0xd94c,\
      \ 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,\n    0x5844, 0x4865,\
      \ 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,\n    0xcb7d, 0xdb5c, 0xeb3f,\
      \ 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n    0x4a75, 0x5a54, 0x6a37, 0x7a16,\
      \ 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,\n    0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa,\
      \ 0xad8b, 0x9de8, 0x8dc9,\n    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83,\
      \ 0x1ce0, 0x0cc1,\n    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9,\
      \ 0x9ff8,\n    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0\n\
      ]\n\nCONTROL_CHANNELS = [903000000, 915000000, 927000000]\n\nDATA_CHANNELS =\
      \ [\n    923500000, 923000000, 925500000, 926500000, 925000000, 908000000, 911500000,\
      \ 905500000,\n    903500000, 915500000, 909000000, 912000000, 922000000, 921000000,\
      \ 924000000, 907500000,\n    910000000, 912500000, 927500000, 910500000, 913000000,\
      \ 918500000, 913500000, 914000000,\n    902500000, 922500000, 907000000, 920000000,\
      \ 919000000, 916500000, 919500000, 914500000,\n    918000000, 911000000, 917500000,\
      \ 916000000, 924500000, 909500000, 904500000, 904000000,\n    917000000, 921500000,\
      \ 920500000, 905000000, 908500000, 906500000, 926000000, 906000000\n]\n\nONE_TO_ONE_GID\
      \ = 0\nGROUP_GID = 1\nSHOUT_GID = 2\nEMERGENCY_GID = 3\n\nTAG_TYPE = 1\nTAG_INITIALS\
      \ = 3\nTAG_MESSAGE_CONTENT = 4\nTAG_MESSAGE = 5\nTAG_ENCRYPTION_INFO = 251\n\
      TAG_PUBLIC_KEY = 252\n\nTEXT_MESSAGE = b\"0\"\nMESH_KEY_EXCHANGE_REQUEST = b\"\
      14\"\nMESH_KEY_EXCHANGE_RESPONSE = b\"15\"\n\ntype_names = {\n    TEXT_MESSAGE:\
      \ \"Text message\",\n    MESH_KEY_EXCHANGE_REQUEST: \"Mesh key exchange request\"\
      ,\n    MESH_KEY_EXCHANGE_RESPONSE: \"Mesh key exchange response\",\n}\n\nPAYLOAD_SPLIT_LEN\
      \ = 90\nCONTROL_PREAMBLE_LEN = 93\nDATA_PREAMBLE_LEN = 10\nHOP_TIME_1 = 33\n\
      HOP_TIME_2 = 27\n\npublic_keys = {\n    94011144312926: bytes.fromhex(\"035c7706208dddea88cc414a2f81481243d41ad1ac1c5b43763bb54e47a7b9a6f33ad13153a5d5fb0ac0fa12d76fd45b26\"\
      )\n}\n\nmesh_fragments = []\n\n\ndef compress_point(x, y):\n    return bytes([2\
      \ | (y & 1)]) + x.to_bytes(48, byteorder=\"big\")\n\n\ndef uncompress_point(data):\n\
      \    p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff\n\
      \    a = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc\n\
      \    b = 0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\n\
      \n    x = int.from_bytes(data[1:], byteorder=\"big\")\n    y_squared = (pow(x,\
      \ 3, p) + x * a + b) % p\n    y = pow(y_squared, (p + 1) // 4, p)\n    if (data[0]\
      \ & 1) != (y & 1):\n        y = p - y\n    return x, y\n\n\ndef crc16(in_bytes):\n\
      \    reg = 0x0000\n    for b in in_bytes:\n        reg = ((reg & 0xff) << 8)\
      \ ^ CRC16_TABLE[(b ^ (reg >> 8)) & 0xff]\n    return reg\n\n\ndef encode_packet(preamble_len,\
      \ in_bytes):\n    length = len(in_bytes) + 2 + 8\n    packet = bytes([length])\
      \ + in_bytes\n    packet += struct.pack(\">H\", crc16(packet) ^ 0xabcd)\n  \
      \  rs = reedsolo.RSCodec(nsym=8, fcr=1)\n    return bytes([0xaa]*preamble_len\
      \ + [0x2d, 0xd4]) + rs.encode(packet)\n\n\ndef encode_tlv(type, value):\n  \
      \  return bytes([type, len(value)]) + value\n\n\ndef encode_encryption_info(encrypted,\
      \ sender_gid, timestamp, enc_counter, resend_id):\n    return struct.pack(\"\
      >BQIHB\", encrypted, sender_gid, timestamp, enc_counter, resend_id)\n\n\ndef\
      \ encode_control_packet(channel, num_data_packets):\n    return encode_packet(CONTROL_PREAMBLE_LEN,\
      \ bytes([9, channel, num_data_packets, 1, 1]))\n\n\ndef encode_data_packet(seq_no,\
      \ segment):\n    return encode_packet(DATA_PREAMBLE_LEN, bytes([2, len(segment),\
      \ seq_no]) + segment)\n\n\ndef encode_dest_gid(app_id, type, gid=None):\n  \
      \  data = struct.pack(\">BH\", type, app_id)\n    if gid:\n        data += struct.pack(\"\
      >Q\", gid)[2:]\n    return data\n\n\ndef encode_shout_message(sender_gid, initials,\
      \ message):\n    packet = encode_tlv(TAG_TYPE, TEXT_MESSAGE)\n    packet +=\
      \ encode_tlv(TAG_INITIALS, initials.encode(\"utf-8\"))\n    packet += encode_tlv(TAG_MESSAGE_CONTENT,\
      \ message.encode(\"utf-8\"))\n    packet += struct.pack(\">H\", crc16(packet))\n\
      \n    encryption_info = encode_encryption_info(False, sender_gid, int(time.time()),\
      \ 0, 0)\n    return encode_tlv(TAG_ENCRYPTION_INFO, encryption_info) + packet\n\
      \n\ndef encode_key_exchange_response(sender_gid, initials, public_key):\n  \
      \  packet = encode_tlv(TAG_TYPE, MESH_KEY_EXCHANGE_RESPONSE)\n    packet +=\
      \ encode_tlv(TAG_INITIALS, initials.encode(\"utf-8\"))\n    packet += encode_tlv(TAG_PUBLIC_KEY,\
      \ public_key)\n    packet += struct.pack(\">H\", crc16(packet))\n\n    encryption_info\
      \ = encode_encryption_info(False, sender_gid, int(time.time()), 0, 0)\n    return\
      \ encode_tlv(TAG_ENCRYPTION_INFO, encryption_info) + packet\n\n\ndef encode_encrypted_payload(app_id,\
      \ recipient_gid, sender_gid, counter, ciphertext):\n    encryption_info = encode_encryption_info(True,\
      \ sender_gid, int(time.time()), counter, 0)\n    packet = encode_dest_gid(app_id,\
      \ ONE_TO_ONE_GID, recipient_gid)\n    packet += bytes([0x00, 0xff, 0x00, 0x00])\n\
      \    packet += encode_tlv(TAG_ENCRYPTION_INFO, encryption_info)\n    packet\
      \ += ciphertext\n    return packet\n\n\ndef encode_packets(channel, payload):\n\
      \    packets = []\n    seq_no = 0\n    for offset in range(0, len(payload),\
      \ PAYLOAD_SPLIT_LEN):\n        segment = payload[offset:offset+PAYLOAD_SPLIT_LEN]\n\
      \        packets.append(encode_data_packet(seq_no, segment))\n        seq_no\
      \ += 1\n    return [encode_control_packet(channel, seq_no)] + packets\n\n\n\
      def encode_shout_packets(channel, app_id, sender_gid, initials, message):\n\
      \    payload = encode_dest_gid(app_id, SHOUT_GID) + encode_shout_message(sender_gid,\
      \ initials, message)\n    return encode_packets(channel, payload)\n\n\ndef gfsk_bytes(packets):\n\
      \    data = [0]*HOP_TIME_1 + list(packets[0]) + [0]*HOP_TIME_1\n    for packet\
      \ in packets[1:]:\n        data += list(packet) + [0]*HOP_TIME_2\n    return\
      \ data\n\n\ndef envelope(packets):\n    envelope = [0]*HOP_TIME_1 + [1]*(len(packets[0])+1)\
      \ + [0]*(HOP_TIME_1-1)\n    for packet in packets[1:]:\n        envelope +=\
      \ [1]*(len(packet)+1) + [0]*(HOP_TIME_2-1)\n    return envelope\n\n\ndef vco(center_freq,\
      \ control_chan, data_chan, packets):\n    control_offset = CONTROL_CHANNELS[control_chan]\
      \ - center_freq\n    vco = [control_offset]*(HOP_TIME_1-3+len(packets[0])+HOP_TIME_1)\n\
      \    for packet in packets[1:]:\n        data_offset = DATA_CHANNELS[data_chan]\
      \ - center_freq\n        vco += [data_offset]*(len(packet)+HOP_TIME_2)\n   \
      \     data_chan = (data_chan + 1) % len(DATA_CHANNELS)\n    vco += [data_offset]*3\n\
      \    return vco\n\n\ndef correct_packet(packet):\n    nsym = 4 if packet[1]\
      \ in (0x50, 0x90) else 8\n    rs = reedsolo.RSCodec(nsym=nsym, fcr=1)\n    return\
      \ rs.decode(packet)\n\n\ndef decode_tlv(tag, value):\n    if tag == TAG_TYPE:\n\
      \        print(f\"Type: {value.decode()} ({type_names[value]})\")\n    elif\
      \ tag == TAG_INITIALS:\n        print(\"Initials: \" + value.decode())\n   \
      \ elif tag == TAG_MESSAGE_CONTENT:\n        if value[0] == 0xff:\n         \
      \   print(\"Message content: \" + value.hex())\n        else:\n            print(\"\
      Message content: \" + value.decode())\n    elif tag == TAG_MESSAGE:\n      \
      \  print(\"Message:\")\n        decode_tlvs(value)\n    elif tag == TAG_ENCRYPTION_INFO:\n\
      \        encrypted, sender_gid, timestamp, enc_counter, resend_id = struct.unpack(\"\
      >BQIHB\", value)\n        print(\"Encrypted: \" + str(encrypted))\n        print(\"\
      Sender GID: \" + str(sender_gid))\n        print(\"Time: \" + str(time.strftime(\"\
      %Y-%m-%d %H:%M:%S\", time.localtime(timestamp))))\n        print(\"Encryption\
      \ Counter: \" + str(enc_counter))\n        print(\"Resend ID: \" + str(resend_id))\n\
      \    elif tag == TAG_PUBLIC_KEY:\n        print(\"Public key: \" + value.hex())\n\
      \    else:\n        print(\"Tag: \" + str(tag) + \" value: \" + value.hex())\n\
      \n\ndef decode_tlvs(data):\n    while len(data) >= 2:\n        tag = data[0]\n\
      \        length = data[1]\n        if 2 + length > len(data):\n            break\n\
      \        value = data[2:2+length]\n        data = data[2+length:]\n        decode_tlv(tag,\
      \ value)\n\n\ndef process_data_frag(data, fragIDX):\n    \"\"\"\n    Process\
      \ a fragment of a data PDU\n    \"\"\"\n\n    if fragIDX >= len(mesh_fragments):\n\
      \        print(f\"Invalid fragment index: {fragIDX}\")\n        return\n\n \
      \   mesh_fragments[fragIDX] = data\n    if all(mesh_fragments):\n        data\
      \ = b\"\".join(mesh_fragments)\n\n        # The first byte in the data PDU is\
      \ the message class\n        if data[0] in (2, 3):\n            print(\"Class:\
      \ \" + (\"SHOUT\" if data[0] == 2 else \"EMERG\"))\n            appID, = struct.unpack(\"\
      >H\", data[1:3])\n            print(f\"AppID: {appID:04x}\")\n            skipbytes\
      \ = 3  # message is SHOUT or EMERG\n        else:\n            print(\"Class:\
      \ \" + (\"P-2-P\" if data[0] == 0 else \"GROUP\"))\n            appID, dGIDHi,\
      \ dGIDLo, = struct.unpack(\">HHL\", data[1:9])\n            print(f\"AppID:\
      \ {appID:04x}\")\n            print(f\"Dest. GID: {(dGIDHi << 32) + dGIDLo}\"\
      )\n            skipbytes = 13  # message is P-2-P or GROUP\n\n        decode_tlvs(data[skipbytes:])\n\
      \n\ndef ingest_packet(data):\n    global mesh_fragments\n\n    data = bytes(data)\n\
      \n    # CRC check\n    packetCRC, = struct.unpack(\">H\", data[-2:])\n    diff\
      \ = packetCRC ^ crc16(data[:-2])\n    if diff not in (0x0000, 0xabcd):\n   \
      \     print(\"RX CRC ERROR\")\n        return\n    # Strip CRC\n    data = data[:-2]\n\
      \n    packet_type = data[1]\n\n    if packet_type == 0x01:\n        # Gotenna\
      \ Mesh \"SYNC\" packet - contains data channel index and TTL data\n        chIDX,\
      \ frags, iniTTL, curTTL = struct.unpack(\"BBBB\", data[2:6])\n        print(f\"\
      RX SYNC (0x{packet_type:02x}): chIDX={chIDX}, frags={frags}, iniTTL={iniTTL},\
      \ curTTL={curTTL}\")\n        mesh_fragments = [None] * frags\n        # in\
      \ real life, hop to index ++chIDX in datachan map\n        #  to receive first\
      \ data packet of this transmission\n\n    elif packet_type == 0x02:\n      \
      \  # Gotenna Mesh \"DATA\" packet - contains message data, may be fragmented\n\
      \        datalen, fragIDX = struct.unpack(\"BB\", data[2:4])\n        print(f\"\
      RX DATA (0x{packet_type:02x}): len={datalen}, fragIDX={fragIDX}\")\n       \
      \ # strip first 4 bytes and send to reassembly\n        process_data_frag(data[4:],\
      \ fragIDX)\n        # in real life, hop to index ++chIDX in datachan map\n \
      \       #  to receive *next* data packet of this transmission\n\n    elif packet_type\
      \ == 0x03:\n        # Gotenna Mesh \"ACK\" packet - contains message hash ID\
      \ and number of hops\n        hashID, hopTTL, curTTL = struct.unpack(\">HBB\"\
      , data[2:6])\n        print(f\"RX ACK (0x{packet_type:02x}): hash=0x{hashID:04x},\
      \ TTL/hop(?)=0x{hopTTL:02x}, curTTL={curTTL}\")\n\n    elif packet_type in (0x50,\
      \ 0x90):\n        # Gotenna Pro \"SYNC\" packet\n        print()\n        print(f\"\
      RX SYNC (0x{packet_type:02x}): unknown={data[2:].hex()}\")\n\n    elif packet_type\
      \ == 0x20:\n        # Gotenna Pro \"DATA\" packet\n        print(f\"RX DATA\
      \ (0x{packet_type:02x}): unknown={data[2:].hex()}\")\n\n    elif packet_type\
      \ == 0x60:\n        # Gotenna Pro \"CONT\" packet\n        print(f\"RX CONT\
      \ (0x{packet_type:02x}): unknown={data[2:].hex()}\")\n\n    else:\n        print(f\"\
      RX TYPE 0x{packet_type:02x} UNKNOWN\")\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 92.0]
    rotation: 0
    state: enabled
- name: import_1
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 140]
    rotation: 0
    state: enabled
- name: initials
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sender initials
    short_id: ''
    type: str
    value: VE3IRR
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 44.0]
    rotation: 0
    state: true
- name: message
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Message
    short_id: ''
    type: str
    value: Hello world!
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 44.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    fbw: '0'
    interp: interp
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 204]
    rotation: 0
    state: enabled
- name: sender_gid
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sender GID
    short_id: ''
    type: intx
    value: '1234567890'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 44.0]
    rotation: 0
    state: true
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: '0.0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: '""'
    gain0: '50'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: ''
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 268.0]
    rotation: 0
    state: enabled

connections:
- [blocks_multiply_xx_0, '0', rational_resampler_xxx_0, '0']
- [blocks_multiply_xx_1, '0', uhd_usrp_sink_0, '0']
- [blocks_repeat_0, '0', blocks_multiply_xx_0, '1']
- [blocks_repeat_1, '0', blocks_vco_c_0, '0']
- [blocks_vco_c_0, '0', blocks_multiply_xx_1, '1']
- [blocks_vector_source_x_0, '0', digital_gfsk_mod_0, '0']
- [blocks_vector_source_x_1, '0', blocks_repeat_0, '0']
- [blocks_vector_source_x_2, '0', blocks_repeat_1, '0']
- [digital_gfsk_mod_0, '0', blocks_multiply_xx_0, '0']
- [rational_resampler_xxx_0, '0', blocks_multiply_xx_1, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
